#version 330 core

in vec2 TexCoords;

out vec4 color;

uniform sampler2D tex_diffuse;
uniform sampler2D tex_specular;

struct Light {
	vec3 pos;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

in vec3 Normal;
in vec3 FragPos;

uniform vec3 viewPos;
uniform Light light;

void main()
{
	
	float alpha = texture(tex_diffuse, TexCoords).w;
	
	vec3 ambient = light.ambient * vec3(texture(tex_diffuse, TexCoords));

	vec3 norm = normalize(Normal);
		
	//vec3 lightDir = normalize(light.pos - FragPos);
	vec3 lightDir = normalize(light.pos);
	float dif = max(dot(norm, lightDir), 0.0);
	
	vec3 diffuse = light.diffuse * dif * vec3(texture(tex_diffuse, TexCoords));
	

	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 ref = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, ref), 0.0), 0.6);
	vec3 specular = light.specular * spec * vec3(texture(tex_specular, TexCoords));

	color = vec4(ambient + diffuse + specular, alpha);
}